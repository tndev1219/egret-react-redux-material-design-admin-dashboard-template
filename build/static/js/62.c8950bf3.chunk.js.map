{"version":3,"sources":["app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"names":["getItems","count","Array","from","length","v","k","map","id","concat","content","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","Object","slicedToArray","SimpleListDnD","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDragEnd","destination","items","state","source","index","setState","_this2","react_default","a","createElement","react_beautiful_dnd_esm","droppableId","provided","snapshot","assign","droppableProps","ref","innerRef","style","isDraggingOver","background","padding","width","item","key","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread","userSelect","grid","margin","placeholder","Component","SimpleHorizontalList","bind","assertThisInitialized","direction","display","overflow","offset","arguments","undefined","move","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","getItemStyle","getListStyle","TwoListDnD","selected","id2List","droppable","droppable2","getList","className","AppDragAndDrop","egret","routeSegments","name","path","title","Drag_Drop_SimpleListDnD","Drag_Drop_SimpleHorizontalList","Drag_Drop_TwoListDnD"],"mappings":"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","file":"static/js/62.c8950bf3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nclass SimpleListDnD extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(10)\n    };\n  }\n\n  onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  };\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default SimpleListDnD;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 ${grid}px 0 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\"\n});\n\nclass SimpleHorizontalList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(6)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default SimpleHorizontalList;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}`,\n    content: `item ${k + offset}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nclass TwoListDnD extends Component {\n  state = {\n    items: getItems(10),\n    selected: getItems(5, 10)\n  };\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  id2List = {\n    droppable: \"items\",\n    droppable2: \"selected\"\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === \"droppable2\") {\n        state = { selected: items };\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        items: result.droppable,\n        selected: result.droppable2\n      });\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"flex flex-space-around\">\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <Droppable droppableId=\"droppable2\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.selected.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default TwoListDnD;\n","import React from \"react\";\nimport SimpleListDnD from \"./SimpleListDnD\";\nimport { Breadcrumb, SimpleCard } from \"egret\";\nimport SimpleHorizontalList from \"./SimpleHorizontalList\";\nimport TwoListDnD from \"./TwoListDnD\";\n\nconst AppDragAndDrop = () => {\n  return (\n    <div className=\"m-sm-30\">\n      <div  className=\"mb-sm-30\">\n        <Breadcrumb\n          routeSegments={[\n            { name: \"others\", path: \"/drag-and-drop\" },\n            { name: \"Drag and Drop\" }\n          ]}\n        />\n      </div>\n      <SimpleCard title=\"Simple List Drag and Drop\">\n        <SimpleListDnD />\n      </SimpleCard>\n      <div className=\"py-12\" />\n      <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\n        <SimpleHorizontalList />\n      </SimpleCard>\n      <div className=\"py-12\" />\n      <SimpleCard title=\"Simple Two List Drag and Drop\">\n        <TwoListDnD />\n      </SimpleCard>\n    </div>\n  );\n};\n\nexport default AppDragAndDrop;\n"],"sourceRoot":""}
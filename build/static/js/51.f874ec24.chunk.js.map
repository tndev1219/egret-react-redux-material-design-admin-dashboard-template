{"version":3,"sources":["../node_modules/@material-ui/core/esm/Fab/Fab.js","../node_modules/@material-ui/core/esm/Avatar/Avatar.js","app/views/chat-box/ChatService.js","app/views/chat-box/ChatAvatar.jsx","app/views/chat-box/ChatSidenav.jsx","app/views/chat-box/EmptyMessage.jsx","app/views/chat-box/ChatContainer.jsx","app/views/chat-box/AppChat.jsx"],"names":["_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","clsx__WEBPACK_IMPORTED_MODULE_4__","_styles_withStyles__WEBPACK_IMPORTED_MODULE_5__","_ButtonBase__WEBPACK_IMPORTED_MODULE_6__","_utils_helpers__WEBPACK_IMPORTED_MODULE_7__","Fab","a","forwardRef","props","ref","children","classes","className","_props$color","color","_props$component","component","_props$disabled","disabled","_props$disableFocusRi","disableFocusRipple","focusVisibleClassName","_props$size","size","_props$variant","variant","other","Object","createElement","root","extended","concat","primary","secondary","inherit","colorInherit","focusRipple","focusVisible","label","__webpack_exports__","theme","typography","button","boxSizing","minHeight","transition","transitions","create","duration","short","borderRadius","padding","minWidth","width","height","boxShadow","shadows","&:active","palette","getContrastText","grey","backgroundColor","&$focusVisible","&:hover","A100","@media (hover: none)","&$disabled","action","disabledBackground","textDecoration","display","alignItems","justifyContent","contrastText","main","dark","&$sizeSmall","&$sizeMedium","sizeSmall","sizeMedium","name","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","Avatar","alt","childrenProp","childrenClassNameProp","childrenClassName","classNameProp","Component","imgProps","sizes","src","srcSet","img","isValidElement","cloneElement","system","colorDefault","position","flexShrink","fontFamily","fontSize","pxToRem","overflow","userSelect","background","default","type","textAlign","objectFit","getContactById","id","axios","get","data","getRecentContact","getChatRoomByContactId","currentUser","contactId","sendNewMessage","message","post","withStyles","avatar","status_circle","bottom","right","border","_ref","status","react_default","ChatSidenav","_ref$contactList","contactList","_ref$recentContactLis","recentContactList","handleContactClick","chat_box_ChatAvatar","lib_default","map","contact","index","onClick","key","format","Date","lastChatTime","getTime","Divider","EmptyMessage","Icon","ChatContainer","currentUserId","toggleSidenav","currentChatRoom","opponentUser","_ref$messageList","messageList","setBottomRef","handleMessageSend","_React$useState","React","useState","_React$useState2","slicedToArray","setMessage","IconButton","react","egret","menuButton","MenuItem","containerRef","chat_box_EmptyMessage","shortid","generate","text","getTimeDifference","time","TextField","value","onChange","e","target","onKeyDown","event","shiftKey","trim","fullWidth","multiline","rows","AppChat","state","open","bottomRef","createRef","updateRecentContactList","_this","then","setState","toConsumableArray","scrollToBottom","current","scrollIntoView","behavior","isMobile","objectSpread","_ref2","chatId","recentListUpdated","console","log","scrollTop","_this$state","setTimeout","_this2","this","_this$state2","routeSegments","Card","elevation","chat_box_ChatSidenav","chat_box_ChatContainer"],"mappings":"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","file":"static/js/51.f874ec24.chunk.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport { capitalize } from '../utils/helpers';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      minHeight: 36,\n      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n        duration: theme.transitions.duration.short\n      }),\n      borderRadius: '50%',\n      padding: 0,\n      minWidth: 0,\n      width: 56,\n      height: 56,\n      boxShadow: theme.shadows[6],\n      '&:active': {\n        boxShadow: theme.shadows[12]\n      },\n      color: theme.palette.getContrastText(theme.palette.grey[300]),\n      backgroundColor: theme.palette.grey[300],\n      '&$focusVisible': {\n        boxShadow: theme.shadows[6]\n      },\n      '&:hover': {\n        backgroundColor: theme.palette.grey.A100,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.grey[300]\n        },\n        '&$disabled': {\n          backgroundColor: theme.palette.action.disabledBackground\n        },\n        textDecoration: 'none'\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled,\n        boxShadow: theme.shadows[0],\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    }),\n\n    /* Styles applied to the span element that wraps the children. */\n    label: {\n      width: '100%',\n      // assure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    primary: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.primary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    secondary: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.secondary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"extended\"`. */\n    extended: {\n      borderRadius: 48 / 2,\n      padding: '0 16px',\n      width: 'auto',\n      minHeight: 'auto',\n      minWidth: 48,\n      height: 48,\n      '&$sizeSmall': {\n        width: 'auto',\n        padding: '0 8px',\n        borderRadius: 34 / 2,\n        minWidth: 34,\n        height: 34\n      },\n      '&$sizeMedium': {\n        width: 'auto',\n        padding: '0 16px',\n        borderRadius: 40 / 2,\n        minWidth: 40,\n        height: 40\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"``. */\n    sizeSmall: {\n      width: 40,\n      height: 40\n    },\n\n    /* Styles applied to the root element if `size=\"medium\"``. */\n    sizeMedium: {\n      width: 48,\n      height: 48\n    }\n  };\n};\nvar Fab = React.forwardRef(function Fab(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'button' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'large' : _props$size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'round' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableFocusRipple\", \"focusVisibleClassName\", \"size\", \"variant\"]);\n\n  return React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className, variant !== \"round\" && classes.extended, size !== 'large' && classes[\"size\".concat(capitalize(size))], disabled && classes.disabled, {\n      primary: classes.primary,\n      secondary: classes.secondary,\n      inherit: classes.colorInherit\n    }[color]),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref\n  }, other), React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? Fab.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['round', 'extended'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFab'\n})(Fab);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if there are children and not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover'\n    }\n  };\n};\nvar Avatar = React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      childrenClassNameProp = props.childrenClassName,\n      classes = props.classes,\n      classNameProp = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"childrenClassName\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\"]);\n\n  var children = null;\n  var img = src || srcSet;\n\n  if (img) {\n    children = React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenClassNameProp && React.isValidElement(childrenProp)) {\n    children = React.cloneElement(childrenProp, {\n      className: clsx(childrenClassNameProp, childrenProp.props.className)\n    });\n  } else {\n    children = childrenProp;\n  }\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classNameProp, !img && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar.\n   * `src` and `alt` props will not be used and no `img` will\n   * be rendered by default.\n   *\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   * The className of the child element.\n   * Used by Chip and ListItemIcon to style the Avatar icon.\n   */\n  childrenClassName: PropTypes.string,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component\n   * is used to display an image.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   */\n  srcSet: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","import axios from \"axios\";\n\nexport const getContactById = id => {\n  return axios.get(\"/api/chat/contacts\", { data: id });\n};\nexport const getRecentContact = id => {\n  return axios.get(\"/api/chat/contacts/recent\", { data: id });\n};\nexport const getAllContact = currentUserId => {\n  return axios.get(\"/api/chat/contacts/all\", { data: currentUserId });\n};\nexport const getChatRoomByContactId = (currentUser, contactId) => {\n  return axios.get(\"/api/chat/chat-room\", { data: { currentUser, contactId } });\n};\nexport const deleteMessage = message => {\n  return axios.post(\"/api/chat/delete\", message);\n};\nexport const sendNewMessage = message => {\n  return axios.post(\"/api/chat/add\", message);\n};\nexport const updateMessage = message => {\n  return axios.post(\"/api/chat/update\", message);\n};\n","import React from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst styles = {\n  avatar: {\n    height: \"40px\",\n    width: \"40px\"\n  },\n  status_circle: {\n    position: \"absolute\",\n    height: \"14px\",\n    width: \"14px\",\n    borderRadius: \"7px\",\n    bottom: \"0px\",\n    right: \"-3px\",\n    border: \"2px solid white\"\n  }\n};\n\nconst ChatAvatar = ({ src, status, classes }) => {\n  return (\n    <div className=\"chat-avatar position-relative\">\n      <Avatar className={classes.avatar} src={src} />\n      <div\n        className={`${classes.status_circle} ${\n          status === \"online\" ? \"bg-primary\" : \"bg-error\"\n        }`}\n      />\n    </div>\n  );\n};\n\nexport default withStyles(styles)(ChatAvatar);\n","import React from \"react\";\nimport ChatAvatar from \"./ChatAvatar\";\nimport Scrollbar from \"react-perfect-scrollbar\";\nimport { Divider } from \"@material-ui/core\";\nimport { format } from \"date-fns\";\n\nconst ChatSidenav = ({\n  currentUser,\n  contactList = [],\n  recentContactList = [],\n  handleContactClick\n}) => {\n  return (\n    <div className=\"chat-sidenav bg-default\">\n      <div className=\"chat-sidenav__topbar flex flex-middle h-56 px-16 bg-primary\">\n        <ChatAvatar src={currentUser.avatar} status={currentUser.status} />\n        <h5 className=\"ml-16 white-space-pre mb-0 font-weight-500 font-size-18 text-white\">\n          {currentUser.name}\n        </h5>\n      </div>\n      <Scrollbar className=\"chat-contact-list position-relative h-400\">\n        {recentContactList.map((contact, index) => (\n          <div\n            onClick={() => handleContactClick(contact.id)}\n            key={index}\n            className=\"flex flex-middle p-16 cursor-pointer  gray-on-hover\"\n          >\n            <ChatAvatar src={contact.avatar} status={contact.status} />\n            <div className=\"pl-16\">\n              <p className=\"m-0\">{contact.name}</p>\n              <p className=\"m-0 text-muted\">\n                {format(\n                  new Date(contact.lastChatTime).getTime(),\n                  \"MMMM dd, yyyy\"\n                )}\n              </p>\n            </div>\n          </div>\n        ))}\n        <Divider />\n        {contactList.map((contact, index) => (\n          <div\n            onClick={() => handleContactClick(contact.id)}\n            key={index}\n            className=\"flex flex-middle px-16 py-4 cursor-pointer  gray-on-hover\"\n          >\n            <ChatAvatar src={contact.avatar} status={contact.status} />\n            <div className=\"pl-16\">\n              <p>{contact.name}</p>\n            </div>\n          </div>\n        ))}\n      </Scrollbar>\n    </div>\n  );\n};\n\nexport default ChatSidenav;\n","import React from \"react\";\nimport { Icon } from \"@material-ui/core\";\n\nconst EmptyMessage = () => {\n  return (\n    <div className=\"empty-message-circle bg-default flex flex-center flex-middle\">\n      <Icon color=\"primary\">chat</Icon>\n    </div>\n  );\n};\n\nexport default EmptyMessage;\n","import React, { Fragment } from \"react\";\nimport {\n  IconButton,\n  Icon,\n  Divider,\n  Fab,\n  TextField,\n  MenuItem\n} from \"@material-ui/core\";\nimport { EgretMenu } from \"egret\";\nimport Scrollbar from \"react-perfect-scrollbar\";\nimport EmptyMessage from \"./EmptyMessage\";\nimport ChatAvatar from \"./ChatAvatar\";\nimport { getTimeDifference } from \"utils\";\nimport shortid from \"shortid\";\n\nconst ChatContainer = ({\n  id: currentUserId,\n  toggleSidenav,\n  currentChatRoom,\n  opponentUser,\n  messageList = [],\n  setBottomRef,\n  handleMessageSend\n}) => {\n  let [message, setMessage] = React.useState(\"\");\n  const sendMessageOnEnter = event => {\n    if (event.key === \"Enter\" && !event.shiftKey) {\n      message = message.trim();\n      if (message !== \"\") handleMessageSend(message);\n      setMessage(\"\");\n    }\n  };\n\n  return (\n    <div className=\"chat-container flex-column position-relative\">\n      <div className=\"chat-container__topbar flex flex-middle flex-space-between p-4 bg-primary\">\n        <div className=\"flex flex-middle\">\n          <div className=\"show-on-mobile\">\n            <IconButton onClick={toggleSidenav}>\n              <Icon className=\"text-white\">short_text</Icon>\n            </IconButton>\n          </div>\n\n          <div className=\"hide-on-mobile\">\n            <div className=\"pl-12\"></div>\n          </div>\n\n          {opponentUser && (\n            <Fragment>\n              <ChatAvatar\n                src={opponentUser.avatar}\n                status={opponentUser.status}\n              />\n              <h5 className=\"ml-16 white-space-pre mb-0 font-weight-500 font-size-18 text-white\">\n                {opponentUser.name}\n              </h5>\n            </Fragment>\n          )}\n        </div>\n        <EgretMenu\n          menuButton={\n            <IconButton>\n              <Icon className=\"text-white\">more_vert</Icon>\n            </IconButton>\n          }\n        >\n          <MenuItem className=\"flex flex-middle\">\n            <Icon className=\"mr-16\">account_circle</Icon> Contact\n          </MenuItem>\n          <MenuItem className=\"flex flex-middle\">\n            <Icon className=\"mr-16\">volume_mute</Icon> Mute\n          </MenuItem>\n          <MenuItem className=\"flex flex-middle\">\n            <Icon className=\"mr-16\">delete</Icon> Clear Chat\n          </MenuItem>\n        </EgretMenu>\n      </div>\n\n      <Scrollbar\n        containerRef={ref => {\n          setBottomRef(ref);\n        }}\n        className=\"chat-message-list flex-grow-1 position-relative\"\n      >\n        {currentChatRoom === \"\" && (\n          <div className=\"flex-column flex-center flex-middle h-100\">\n            <EmptyMessage />\n            <p>Select a contact</p>\n          </div>\n        )}\n        {messageList.map((message, index) => (\n          <div className=\"flex flex-top px-16 py-12\" key={shortid.generate()}>\n            <ChatAvatar src={message.avatar} status={message.status} />\n            <div className=\"ml-16\">\n              <p className=\"text-muted m-0 mb-8\">{message.name}</p>\n              <div\n                className={`px-16 py-8 mb-4 list__message ${\n                  currentUserId === message.contactId\n                    ? \"bg-primary text-white\"\n                    : \"bg-paper\"\n                }`}\n              >\n                <span className=\"white-space-pre-line\">{message.text}</span>\n              </div>\n              <p className=\"text-muted mb-0\">\n                {getTimeDifference(new Date(message.time))} ago\n              </p>\n            </div>\n          </div>\n        ))}\n        {/* <div ref={ref => setBottomRef(ref)} /> */}\n      </Scrollbar>\n\n      <Divider />\n\n      {currentChatRoom !== \"\" && (\n        <div className=\"flex flex-middle px-16 py-8\">\n          <TextField\n            label=\"Type your message here*\"\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n            onKeyDown={sendMessageOnEnter}\n            fullWidth\n            multiline={true}\n            rows={1}\n          />\n          <div>\n            <Fab\n              onClick={() => {\n                if (message.trim() !== \"\") handleMessageSend(message);\n                setMessage(\"\");\n              }}\n              color=\"primary\"\n              className=\"ml-16\"\n            >\n              <Icon>send</Icon>\n            </Fab>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatContainer;\n","import React, { Component } from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport {\n  Breadcrumb,\n  EgretSidenavContainer,\n  EgretSidenav,\n  EgretSidenavContent\n} from \"egret\";\nimport {\n  getAllContact,\n  getRecentContact,\n  sendNewMessage,\n  getContactById,\n  getChatRoomByContactId\n} from \"./ChatService\";\nimport ChatSidenav from \"./ChatSidenav\";\nimport ChatContainer from \"./ChatContainer\";\nimport { generateRandomId, isMobile } from \"utils\";\n\nclass AppChat extends Component {\n  state = {\n    currentUser: {\n      id: \"7863a6802ez0e277a0f98534\"\n    },\n    contactList: [],\n    recentContactList: [],\n    messageList: [],\n    currentChatRoom: \"\",\n    opponentUser: null,\n    open: true\n  };\n\n  bottomRef = React.createRef();\n\n  componentDidMount() {\n    let { id } = this.state.currentUser;\n    getContactById(id).then(data => {\n      this.setState({\n        open: !isMobile(),\n        currentUser: {\n          ...data.data\n        }\n      });\n    });\n    getAllContact(this.state.currentUser.id).then(data =>\n      this.setState({ contactList: [...data.data] })\n    );\n    this.updateRecentContactList();\n  }\n\n  updateRecentContactList = () => {\n    let { id } = this.state.currentUser;\n    getRecentContact(id).then(data => {\n      this.setState({\n        recentContactList: [...data.data]\n      });\n    });\n  };\n\n  scrollToBottom = () => {\n    this.bottomRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  handleContactClick = contactId => {\n    if (isMobile()) this.toggleSidenav();\n\n    getContactById(contactId).then(({ data }) => {\n      this.setState({\n        opponentUser: { ...data }\n      });\n    });\n    getChatRoomByContactId(this.state.currentUser.id, contactId).then(\n      ({ data }) => {\n        let { chatId, messageList, recentListUpdated } = data;\n        console.log(chatId);\n\n        this.setState(\n          {\n            currentChatRoom: chatId,\n            messageList\n          },\n          () => {\n            this.bottomRef.scrollTop = 9999999999999;\n          }\n        );\n        if (recentListUpdated) {\n          this.updateRecentContactList();\n        }\n      }\n    );\n  };\n\n  handleMessageSend = message => {\n    let { id } = this.state.currentUser;\n    let { currentChatRoom, opponentUser } = this.state;\n    if (currentChatRoom === \"\") return;\n    sendNewMessage({\n      chatId: currentChatRoom,\n      text: message,\n      contactId: id,\n      time: new Date()\n    }).then(data => {\n      this.setState(\n        {\n          messageList: [...data.data]\n        },\n        () => {\n          this.bottomRef.scrollTop = 9999999999999;\n        }\n      );\n\n      // bot message\n      setTimeout(() => {\n        sendNewMessage({\n          chatId: currentChatRoom,\n          text: `Hi, I'm ${opponentUser.name}. Your imaginary friend.`,\n          contactId: opponentUser.id,\n          time: new Date()\n        }).then(data => {\n          this.setState(\n            {\n              messageList: [...data.data]\n            },\n            () => {\n              this.bottomRef.scrollTop = 9999999999999;\n            }\n          );\n        });\n      }, 750);\n      // bot message ends here\n    });\n  };\n\n  setBottomRef = ref => {\n    this.bottomRef = ref;\n  };\n\n  toggleSidenav = () => this.setState({ open: !this.state.open });\n\n  render() {\n    let {\n      currentUser,\n      contactList,\n      recentContactList,\n      messageList,\n      opponentUser,\n      currentChatRoom\n    } = this.state;\n    return (\n      <div className=\"m-sm-30\">\n        <div className=\"mb-sm-30\">\n          <Breadcrumb routeSegments={[{ name: \"Chat\" }]} />\n        </div>\n        <Card elevation={6}>\n          <EgretSidenavContainer>\n            <EgretSidenav\n              width=\"230px\"\n              open={this.state.open}\n              toggleSidenav={this.toggleSidenav}\n            >\n              <ChatSidenav\n                currentUser={currentUser}\n                contactList={contactList}\n                recentContactList={recentContactList}\n                handleContactClick={this.handleContactClick}\n              />\n            </EgretSidenav>\n            <EgretSidenavContent>\n              <ChatContainer\n                id={currentUser.id}\n                opponentUser={opponentUser}\n                messageList={messageList}\n                currentChatRoom={currentChatRoom}\n                setBottomRef={this.setBottomRef}\n                handleMessageSend={this.handleMessageSend}\n                toggleSidenav={this.toggleSidenav}\n              />\n            </EgretSidenavContent>\n          </EgretSidenavContainer>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default AppChat;\n"],"sourceRoot":""}